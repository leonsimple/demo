<?xml version="1.0"?>
<doc>
<assembly>
<name>
WebMMengine
</name>
</assembly>
<members>
<member name="T:WebMMengine.webwxstatusnotify_requst">
	<summary>
 收到消息确认的
 </summary>
	<remarks></remarks>
</member><member name="M:WebMMengine.xml_ser.Deserialize(System.String,System.Type)">
	<summary>
 反序列化
 </summary>
	<param name="xml"></param>
	<param name="objtype"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:WebMMengine.xml_ser.Serialize(System.Object)">
	<summary>
 序列化
 </summary>
	<param name="obj"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:WebMMengine.xml_ser">
	<summary>
 对象与xml  的 Serialize 与 deSerialize
 </summary>
	<remarks></remarks>
</member><member name="M:WebMMengine.webwxverifyuser_request.set_user(System.String,System.String)">
	<summary>
 设置要添加的人
 </summary>
	<param name="un"></param>
	<param name="ticket"></param>
	<remarks></remarks>
</member><member name="F:WebMMengine.WebMMengine.MemberList">
	<summary>
 所有的联系人 联系人来源主要有2个地方
 第一 init 里面，加载的最近的联系人列表  包含了没有保存到通讯录的群
 第二 getcontact 里面获取的 列表
 第三 后续sync通知来的单个联系人
 </summary>
	<remarks></remarks>
</member><member name="M:WebMMengine.WebMMengine.MemberList_addbat(WebMMengine.Contact[])">
	<summary>
 批量合并的 联系人
 </summary>
	<param name="List"></param>
	<remarks></remarks>
</member><member name="M:WebMMengine.WebMMengine.MemberList_addOne(WebMMengine.Contact)">
	<summary>
 添加一个联系人
 </summary>
	<param name="c"></param>
	<remarks></remarks>
</member><member name="M:WebMMengine.WebMMengine.MemberList_RemoveUsers(WebMMengine.Contact[])">
	<summary>
 删除用户
 </summary>
	<param name="list"></param>
	<remarks></remarks>
</member><member name="M:WebMMengine.WebMMengine.CheckContact_by_username(System.String)">
	<summary>
 检查是否包含 指定用户
 </summary>
	<param name="username"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:WebMMengine.WebMMengine.getContact_name_inChartroom(System.String,System.String)">
	<summary>
 获取聊天室里面的某个人的id
 </summary>
	<param name="chatromusername"></param>
	<param name="username"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:WebMMengine.WebMMengine.getContact_DisplayName_inChartroom(System.String,System.String)">
	<summary>
 获取聊天室里面的某个人的id 
 </summary>
	<param name="chatromusername"></param>
	<param name="username"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:WebMMengine.ExecHelper.#ctor(System.Boolean)">
	<summary>
	</summary>
	<param name="bShowDebug">是否在控制台上输出调试信息</param>
	<remarks></remarks>
</member><member name="M:WebMMengine.ExecHelper.#ctor(System.Boolean,System.Int32)">
	<summary>
	</summary>
	<param name="bShowDebug">是否在控制台上输出调试信息</param>
	<param name="timeout">指定的最大等待时间</param>
	<remarks></remarks>
</member><member name="M:WebMMengine.ExecHelper.#ctor(System.Boolean,System.Int32,System.String)">
	<summary>
	</summary>
	<param name="bShowDebug">是否在控制台上输出调试信息</param>
	<param name="timeout">指定的最大等待时间</param>
	<param name="workdir">工作目录</param>
	<remarks></remarks>
</member><member name="P:WebMMengine.ExecHelper.MaxTimeout">
	<summary>
 获取或者设置  指定的最大等待时间
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:WebMMengine.ExecHelper.WorkingDirectory">
	<summary>
 设置或者执行工作目录
 如果不设置的话，默认当前目录
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:WebMMengine.ExecHelper.exeTime">
	<summary>
 状态吗
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:WebMMengine.ExecHelper.ExitCode">
	<summary>
 程序执行毫秒数
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:WebMMengine.ExecHelper.Print_All">
	<summary>
 获取全部的输出信息
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:WebMMengine.ExecHelper.Print_stdOut">
	<summary>
 仅仅获取stdout流的输出信息
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:WebMMengine.ExecHelper.Print_stdErr">
	<summary>
 仅仅获取stderr流的输出信息
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:WebMMengine.ExecHelper.exec(System.String,System.String)">
	<summary>
 程序执行主函数
 </summary>
	<param name="exePath">exe路径</param>
	<param name="strArg">参数</param>
	<returns>完整的输出</returns>
	<remarks></remarks>
</member><member name="T:WebMMengine.ExecHelper">
	<summary>
 vb.net执行外部程序，并且获取程序输出
 fengfk 2016-07
 
 </summary>
	<remarks></remarks>
</member><member name="M:WebMMengine.RegMatch.Match(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
	<summary>
 使用正则表达式来提取需要的内容
 </summary>
	<param name="StrR">正则表达式</param>
	<param name="strContent">用来匹配的源数据</param>
	<param name="Key">正则中的组名，该名在StrR中定义</param>
	<returns>返回提取的内容</returns>
	<remarks></remarks>
</member><member name="M:WebMMengine.RegMatch.GetInputValue(System.String,System.String)">
	<summary>
 得到input 标签的value，这里有些问题，
 </summary>
	<param name="Key"></param>
	<param name="strContent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:WebMMengine.RegMatch.Match(System.String,System.String)">
	<summary>
 是否匹配
 </summary>
	<param name="StrR"></param>
	<param name="strContent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:WebMMengine.RegMatch.Matches(System.String,System.String)">
	<summary>
 匹配多个结果
 </summary>
	<param name="StrR">正则表达式</param>
	<param name="strContent">用来匹配的源数据</param>
	<returns>提取的集合</returns>
	<remarks></remarks>
</member><member name="T:WebMMengine.RegMatch">
	<summary>
 正则类：深圳　阿宽；简化正则调用
 </summary>
	<remarks></remarks>
</member><member name="M:WebMMengine.commhttp.DownLoadFile(System.String,System.String)">
	<summary>
 下载文件
 </summary>
	<param name="url"></param>
	<param name="Path"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:WebMMengine.commhttp.CheckFileName(System.String)">
	<summary>
 修正文件名
 </summary>
	<param name="path">路径地址</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:WebMMengine.MsgType.文字">
	<summary>
 MSGTYPE_TEXT: 1,
 </summary>
	<remarks></remarks>
</member><member name="F:WebMMengine.MsgType.图片">
	<summary>
 MSGTYPE_IMAGE: 3,
 </summary>
	<remarks></remarks>
</member><member name="F:WebMMengine.MsgType.语音">
	<summary>
 MSGTYPE_VOICE: 34,
 </summary>
	<remarks></remarks>
</member><member name="F:WebMMengine.MsgType.视频">
	<summary>
 MSGTYPE_VIDEO: 43,
 </summary>
	<remarks></remarks>
</member><member name="F:WebMMengine.MsgType.验证信息">
	<summary>
  MSGTYPE_VERIFYMSG: 37,
 </summary>
	<remarks></remarks>
</member><member name="F:WebMMengine.MsgType.名片">
	<summary>
   MSGTYPE_SHARECARD: 42,
 </summary>
	<remarks></remarks>
</member><member name="F:WebMMengine.MsgType.表情">
	<summary>
    MSGTYPE_EMOTICON: 47,
 </summary>
	<remarks></remarks>
</member><member name="F:WebMMengine.MsgType.链接">
	<summary>
 MSGTYPE_APP: 49,
 </summary>
	<remarks></remarks>
</member><member name="F:WebMMengine.MsgType.位置">
	<summary>
 MSGTYPE_LOCATION: 48,
 </summary>
	<remarks></remarks>
</member><member name="F:WebMMengine.MsgType.未知51">
	<summary>
  MSGTYPE_STATUSNOTIFY: 51,
 </summary>
	<remarks></remarks>
</member><member name="P:WebMMengine.HttpProc.Proxy">
	<summary>
 代理服务器
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:WebMMengine.HttpProc.UserAgent">
	<summary>
 获取或者设置使用的UserAgent
 </summary>
	<value></value>
	<returns></returns>
	<remarks>默认模拟Win2003平台、Ie6.0、.net CLR 1.1 </remarks>
</member><member name="P:WebMMengine.HttpProc.strUrl">
	<summary>
 获取或者设置当前要请求的地址
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:WebMMengine.HttpProc.strRefUrl">
	<summary>
 获取或者设置发送时模拟的来源地址
 </summary>
	<value></value>
	<returns></returns>
	<remarks>该属性应用在Http请求中的Referer标头</remarks>
</member><member name="P:WebMMengine.HttpProc.strPostdata">
	<summary>
 获取或者设置要发送的数据
 </summary>
	<value></value>
	<returns></returns>
	<remarks>以Post方式发送的数据</remarks>
</member><member name="P:WebMMengine.HttpProc.strErr">
	<summary>
 处理碰到的错误
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:WebMMengine.HttpProc.strCode">
	<summary>
 获取得到的Http响应码
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:WebMMengine.HttpProc.ResHtml">
	<summary>
 获取响应的Http数据
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:WebMMengine.HttpProc.encoding">
	<summary>
 设置Http请求和响应中使用的编码
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:WebMMengine.HttpProc.cookiePost">
	<summary>
 获取或者设置要发送的Cookie
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:WebMMengine.HttpProc.cookieGet">
	<summary>
 获取响应中的Cookie
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:WebMMengine.HttpProc.Proc">
	<summary>
 处理Get和Post请求，得到相应
 </summary>
	<returns></returns>
	<remarks>在设置好各个属性以后调用该方法；该方法只是简单的同步读取；该方法只考虑到Http响应的结果为文本</remarks>
</member><member name="M:WebMMengine.HttpProc.appendHeader(System.String,System.String)">
	<summary>
 追加个性化的httpi请求头
 </summary>
	<param name="key"></param>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="M:WebMMengine.HttpProc.#ctor(System.String,System.String,System.Net.CookieCollection)">
	<summary>
 构造函数
 </summary>
	<param name="strHttpUrl">发送的地址</param>
	<param name="StrHttpPostData">发送的数据</param>
	<param name="cookiePosted">发送数据的时候使用的cookie</param>
	<remarks>此方法用于以Post方式并附带cookie的发送数据</remarks>
</member><member name="M:WebMMengine.HttpProc.#ctor(System.String,System.String)">
	<summary>
 构造函数
 </summary>
	<param name="strHttpUrl">发送的地址</param>
	<param name="StrHttpPostData">发送的数据</param>
	<remarks>此方法用于以Post方式的发送数据</remarks>
</member><member name="M:WebMMengine.HttpProc.#ctor(System.String,System.Net.CookieCollection)">
	<summary>
 构造函数
 </summary>
	<param name="strHttpUrl">发送的地址</param>
	<param name="cookiePosted">发送数据的时候使用的cookie</param>
	<remarks>此方法用于以GET方式并附带cookie的请求数据</remarks>
</member><member name="M:WebMMengine.HttpProc.#ctor(System.String)">
	<summary>
 构造函数
 </summary>
	<param name="strHttpUrl">发送的地址</param>
	<remarks>此方法用于以GET方式请求数据</remarks>
</member><member name="T:WebMMengine.HttpProc">
	<summary>
 HTTP处理类，深圳 阿宽；简化了HTTP的GET和POST请求
 </summary>
	<remarks></remarks>
</member><member name="F:WebMMengine.WebMMengine._chatContent">
	<summary>
 全局的聊天信息表
 每个用户的消息webmm_mesg对应一个 ArrayList 存储
 </summary>
	<remarks></remarks>
</member><member name="M:WebMMengine.WebMMengine._chatContent_addMessage(System.String,System.String,WebMMengine.webmm_mesg)">
	<summary>
 存储一个聊天历史
 </summary>
	<param name="strfrmuser"></param>
	<param name="msg"></param>
	<remarks></remarks>
</member><member name="M:WebMMengine.WebMMengine._chatContent_getUsrMsgs(System.String)">
	<summary>
 保存
 </summary>
	<param name="strfrmuser"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:WebMMengine.WebMMengine.mm_webwxsync">
	<summary>
 消息同步
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:WebMMengine.WebMMengine.sync_msg_StatusNotifyUserName(System.String)">
	<summary>
 这个里面包含了很多 静默群的信息
 </summary>
	<param name="StatusNotifyUserName"></param>
	<remarks></remarks>
</member><member name="M:WebMMengine.WebMMengine.mm_webwxverifyuser(System.String,System.String,System.String)">
	<summary>
 通过验证好友
 </summary>
	<param name="un"></param>
	<param name="tickets"></param>
	<param name="msg"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:WebMMengine.WebMMengine.sync_newMessage(WebMMengine.webwxsync)">
	<summary>
 新消息到达的函数
 </summary>
	<param name="res_sync"></param>
	<remarks></remarks>
</member><member name="T:WebMMengine.WebMMengine">
	<summary>
 sync响应内容包含的信息比较多，所以，另起一个文件
 
 </summary>
	<remarks></remarks>
</member><member name="F:WebMMengine.webmm_login_session.webmmCookies">
	<summary>
 cookie 对应的key-value保存的表
 </summary>
	<remarks></remarks>
</member><member name="P:WebMMengine.webmm_login_session.WX_HOST">
	<summary>
 微信所用的服务器
 默认可以使用 wx2.qq.com ，但是有的时候也会被切换到 wx.qq.com
 </summary>
	<remarks></remarks>
</member><member name="F:WebMMengine.webmm_login_session.htSyncKey">
	<summary>
 存储 SyncKey
 </summary>
	<remarks></remarks>
</member><member name="T:WebMMengine.webmm_login_session">
	<summary>
 当前登录的session 类
 这个类可以序列化 以保存session
 </summary>
	<remarks></remarks>
</member><member name="E:WebMMengine.WebMMengine.on_loadQr">
	<summary>
 当加载到验证码的时候
 </summary>
	<param name="bmp"></param>
	<remarks></remarks>
</member><member name="E:WebMMengine.WebMMengine.on_loadQr_error">
	<summary>
 二维码加载失败了
 </summary>
	<remarks></remarks>
</member><member name="E:WebMMengine.WebMMengine.on_scanQR">
	<summary>
 当手机扫描了二维码
 </summary>
	<remarks></remarks>
</member><member name="E:WebMMengine.WebMMengine.on_Init">
	<summary>
 当引擎与主机init交互成功之后
 </summary>
	<remarks></remarks>
</member><member name="E:WebMMengine.WebMMengine.on_scanQR_conform">
	<summary>
 当手机点击了确认
 </summary>
	<remarks></remarks>
</member><member name="E:WebMMengine.WebMMengine.on_webMM_status_changed">
	<summary>
 当微信状态改变的时候，只有该改变的时候才通知
 </summary>
	<param name="state"></param>
	<remarks></remarks>
</member><member name="E:WebMMengine.WebMMengine.on_webMM_status">
	<summary>
 微信引擎最新状态通知 每次心跳都通知 
 </summary>
	<param name="state"></param>
	<remarks></remarks>
</member><member name="E:WebMMengine.WebMMengine.on_NewMessage">
	<summary>
 新消息到达
 </summary>
	<param name="msg"></param>
	<remarks></remarks>
</member><member name="E:WebMMengine.WebMMengine.on_User_Verify">
	<summary>
 好友验证请求道了
 </summary>
	<param name="ri"></param>
	<param name="Accpet">设置为true的话，就通过验证</param>
	<remarks></remarks>
</member><member name="E:WebMMengine.WebMMengine.on_GetContactList">
	<summary>
 获取到新的联系人
 这个事件只在 扫码之后，webwxgetcontact加载之后 触发一起。
 触发这个时间之前，不会触发 on_GetContact事件
 </summary>
	<param name="Contacts"></param>
	<remarks></remarks>
</member><member name="E:WebMMengine.WebMMengine.on_GetContact">
	<summary>
 on_GetContactList 之后新增或者更新一个联系人 都会触发这个事件
 
 </summary>
	<param name="Contacts"></param>
	<remarks></remarks>
</member><member name="E:WebMMengine.WebMMengine.on_ContactRemove">
	<summary>
 删除一个联系人
 </summary>
	<param name="un"></param>
	<remarks></remarks>
</member><member name="E:WebMMengine.WebMMengine.on_SessionLogout">
	<summary>
 当发现登陆失败的时候
 </summary>
	<remarks></remarks>
</member><member name="E:WebMMengine.WebMMengine.on_Loging">
	<summary>
 日志通知
 </summary>
	<param name="str"></param>
	<remarks></remarks>
</member><member name="E:WebMMengine.WebMMengine.on_SaveSession">
	<summary>
 通知保存session
 </summary>
	<param name="cookies"></param>
	<remarks></remarks>
</member><member name="E:WebMMengine.WebMMengine.on_GetSession">
	<summary>
 获取cookie
 </summary>
	<param name="cookies"></param>
	<remarks></remarks>
</member><member name="M:WebMMengine.webwxcreatechatroom_request.add_user(System.String)">
	<summary>
 添加一个人
 </summary>
	<param name="un"></param>
	<remarks></remarks>
</member><member name="M:WebMMengine.WebMMengine.mm_webwxsendmsg(WebMMengine.sendMsgType,System.String,System.String,System.String@)">
	<summary>
 发送消息
 </summary>
	<param name="smt">
 消息类型
 因为微信发送的类型很多，这里给接口开发的时候只定义 文字和文件2种类型
 发送内部会 二次分类成  图片 表情 文件
 </param>
	<param name="toUser">发送给谁</param>
	<param name="msg">消息正文
 如果为文字：那就是文字的
 如果是图片：则为图片路径
 </param>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:WebMMengine.WebMMengine.htMediaID">
	<summary>
 上传过的图片mediaID表
 key 为文件名字，确保一个文件只上传一次
 </summary>
	<remarks></remarks>
</member><member name="M:WebMMengine.WebMMengine.webwxuploadmedia(System.String,System.String,System.Boolean)">
	<summary>
 上传图片，取得mediaID
 </summary>
	<param name="filename"></param>
	<param name="toUser"></param>
	<param name="isPIC"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:WebMMengine.My.Resources.Resources.ResourceManager">
	<summary>
  返回此类使用的缓存的 ResourceManager 实例。
</summary>
</member><member name="P:WebMMengine.My.Resources.Resources.Culture">
	<summary>
  使用此强类型资源类，为所有资源查找
  重写当前线程的 CurrentUICulture 属性。
</summary>
</member><member name="T:WebMMengine.My.Resources.Resources">
	<summary>
  一个强类型的资源类，用于查找本地化的字符串等。
</summary>
</member><member name="M:WebMMengine.request_base.ToString">
	<summary>
 转化成json 用于post
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:WebMMengine.request_base">
	<summary>
 mm 交互的基础类
 </summary>
	<remarks></remarks>
</member><member name="T:WebMMengine.webwxsync_requst">
	<summary>
 刷新新消息的
 </summary>
	<remarks></remarks>
</member><member name="F:WebMMengine.webmm_mesg.MsgId">
	<summary>
 消息id
 </summary>
	<remarks></remarks>
</member><member name="F:WebMMengine.webmm_mesg.FromUserName">
	<summary>
 发送者
 </summary>
	<remarks></remarks>
</member><member name="F:WebMMengine.webmm_mesg.ToUserName">
	<summary>
 接收者
 </summary>
	<remarks></remarks>
</member><member name="F:WebMMengine.webmm_mesg.MsgType">
	<summary>
 消息内容
 </summary>
	<remarks></remarks>
</member><member name="F:WebMMengine.webmm_mesg.Content">
	<summary>
 消息正文
 </summary>
	<remarks></remarks>
</member><member name="F:WebMMengine.webmm_mesg.FromUserName_cr">
	<summary>
 如果是聊天室的话，就要从聊天内容里面把发送方的用户名解析出来
 </summary>
	<remarks></remarks>
</member><member name="F:WebMMengine.webmm_mesg.FileBuf">
	<summary>
 webmm 交互协议里面没有这个字段的
 是本地额外添加的，用来存储 语音以及图片之类
 </summary>
	<remarks></remarks>
</member><member name="T:WebMMengine.webmm_mesg">
	<summary>
 新消息到达
 </summary>
	<remarks></remarks>
</member><member name="T:WebMMengine.webwxinit_request">
	<summary>
 登录首次加载数据的
 </summary>
	<remarks></remarks>
</member><member name="M:WebMMengine.WebMMengine.Deserialize(System.String,System.Type)">
	<summary>
 反序列化
 </summary>
	<param name="strJson"></param>
	<param name="t"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:WebMMengine.Contact.rob_Contact_id">
	<summary>
 webmm不会返回这个，这个是我们本地数据库里面对应的id
 </summary>
	<remarks></remarks>
</member><member name="M:WebMMengine.Contact.NickName_span">
	<summary>
 去掉名字里面的表情标签 
   奥利奥<span class="emoji emoji1f493"></span>
 艳琳—鸠丹阿粉丝群<span class="emoji emoji2665"></span>?
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:WebMMengine.Contact.GetContactNickname">
	<summary>
 获取 用户的名字  
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:WebMMengine.Contact.WXID">
	<summary>
 主机响应没有这个字段，
 我们自己想办法对应的字段
 </summary>
	<remarks></remarks>
</member><member name="P:WebMMengine.WebMMengine.UIN">
	<summary>
 当前账号的UIN 
 启动前设置下
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:WebMMengine.WebMMengine.User_Agent">
	<summary>
 登录所使用的用户代理
 为了防止微信主机端检测，最好每个用户都使用唯一的ua 并且长期使用一个
 </summary>
	<remarks></remarks>
</member><member name="P:WebMMengine.WebMMengine.Status">
	<summary>
 获取当前引擎处于的状态
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:WebMMengine.WebMMengine.pgv_pvi">
	<summary>
 本地生成的一个cookie 可能用来统计，也可能用来跟踪某台电脑的多次/多用户登录
 这个数据不提供也可以，但是最好对于同一个客户，在一个较长的时间段内使用相同的数值
 来防止封号
 
 不能100%确认的：每个账号 长期不扫码登陆的话，这个数值如果没匹配上的话，登陆将不成功
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:WebMMengine.WebMMengine.pgv_si">
	<summary>
 同 pgv_pvi 配合使用
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:WebMMengine.WebMMengine.lastError">
	<summary>
 引擎最后的错误
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:WebMMengine.WebMMengine.Auto_Accept_Verify">
	<summary>
 是不是默认接受邀请
 </summary>
	<remarks></remarks>
</member><member name="P:WebMMengine.WebMMengine.mmSession">
	<summary>
 当前登录用户的全部变量
 </summary>
	<remarks></remarks>
</member><member name="F:WebMMengine.WebMMengine.isConsoleLog">
	<summary>
 console日志是否打开
 </summary>
	<remarks></remarks>
</member><member name="F:WebMMengine.WebMMengine.isFileLog">
	<summary>
 文件日志是否打开
 </summary>
	<remarks></remarks>
</member><member name="F:WebMMengine.WebMMengine.logFilename">
	<summary>
 日志文件名字
 </summary>
	<remarks></remarks>
</member><member name="F:WebMMengine.WebMMengine.hasQRcode">
	<summary>
 当前是否有二维码
 </summary>
	<remarks></remarks>
</member><member name="F:WebMMengine.WebMMengine.QRcode">
	<summary>
 当前二维码的图片
 </summary>
	<remarks></remarks>
</member><member name="P:WebMMengine.WebMMengine.uuid">
	<summary>
 当前登录的uuid
 </summary>
	<remarks></remarks>
</member><member name="M:WebMMengine.WebMMengine.WebMM_Stop">
	<summary>
 停止当前引擎内的所有线程
 </summary>
	<remarks></remarks>
</member><member name="M:WebMMengine.WebMMengine.login_webwxpushloginurl">
	<summary>
 采用wappush登陆 
 考虑是不是要实现
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:WebMMengine.WebMMengine.login_StartQRcodeLogin">
	<summary>
 开始二维码登录:
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:WebMMengine.WebMMengine.login_LoadCookiesAndCheckLogin">
	<summary>
 使用cookie登陆
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:WebMMengine.WebMMengine.mm_webwxbatchgetcontact_chatroom(System.String,System.String)">
	<summary>
 补充加载群成员的信息
 群号的来源包括三个地方
 1、init里面加载的 最近聊天的群 以及 ChatSet
 2、webwxgetcontact 获取到的 群列表
 3、头几次webwxsync内加载到的 MsgType=51   StatusNotifyUserName 清单里面的
 
 这里的用法有2个
 1、获取多群的详细信息，把多个群username传递给list，可以获取到各群的简单信息
 2、指定获取单个群内成员的详细信息
 
 </summary>
	<param name="list"></param>
	<param name="chatroom"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:WebMMengine.WebMMengine.mm_webwxinit">
	<summary>
 登陆成功之后，webwxinit 加载初始化数据
 包含的内容有
 ContactList 最近联系人 ，包含：联系人、公众号、群(username 以@@开头，不管有没有保存到通讯录,群成员只有UserName一个字段获取，不详细)
  SyncKey  
 User     当前用户的属性
 ChatSet  最近聊天的信息 ？
 公众号信息  可以忽略
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:WebMMengine.WebMMengine.mm_webwxgeticon(System.String)">
	<summary>
 从制定url加载图片
 </summary>
	<param name="HeadImgUrl"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:WebMMengine.WebMMengine.mm_webwxsearch(System.String)">
	<summary>
 作废，测试用
 </summary>
	<param name="un"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:WebMMengine.WebMMengine.mm_webwxoplog(System.String,System.String)">
	<summary>
 修改用户备注
 </summary>
	<param name="un"></param>
	<param name="nickname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:WebMMengine.WebMMengine.mm_webwxupdatechatroom_modtopic(System.String,System.String)">
	<summary>
 修改群名字
 </summary>
	<param name="un"></param>
	<param name="nickname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:WebMMengine.WebMMengine.mm_webwxupdatechatroom_addmember(System.String,System.String)">
	<summary>
 像群内拉人
 </summary>
	<param name="un"></param>
	<param name="addmemberList"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:WebMMengine.WebMMengine.mm_webwxgetcontact">
	<summary>
 获取我的联系人列表
   联系人
   保存到通讯录的群 ：无群成员信息
   公众号
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:WebMMengine.WebMMengine.mm_webwxstatusnotify(System.String,System.String,System.String)">
	<summary>
 收到某次同步信息之后的 回传是否同步收到
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:WebMMengine.WebMMengine.mm_main_Looper">
	<summary>
 主循环过程
 </summary>
	<remarks>
 处理2个流程：
 1、  二维码扫描流程中的等待扫描
 2、  循环的消息检测
 </remarks>
</member><member name="M:WebMMengine.WebMMengine.getBaseRequest">
	<summary>
 请求基础字段
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:WebMMengine.webwxsendmsg_request">
	<summary>
 发送消息的
 </summary>
	<remarks></remarks>
</member><member name="F:WebMMengine.SendMsg.Type">
	<summary>
 1：文字 表情之类的  填写Content字段
 3：图片  填写 MediaId字段
 47 表情  EmojiFlag=2
 </summary>
	<remarks></remarks>
</member>
</members>
</doc>